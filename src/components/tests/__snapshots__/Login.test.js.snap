// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should test AdminLogin component 1`] = `
<div>
  <div
    className="container-fluid"
  >
    <div
      className="row main-content bg-success text-center"
    >
      <div
        className="col-md-4 text-center company__info"
      >
        <span
          className="company__logo"
        >
          <Image
            fluid={false}
            height={70}
            rounded={false}
            roundedCircle={false}
            src="http://ewaste-dec20-dev.azurewebsites.net/assets/images/wm-logo.png"
            thumbnail={false}
            width={70}
          />
        </span>
        <h4
          className="company_title"
        >
          Waste Management
        </h4>
      </div>
      <div
        className="col-md-8 col-xs-12 col-sm-12 login_form "
      >
        <div
          className="container-fluid mx-auto"
        >
          <div
            className="row"
          >
            <form
              className="form-group mx-auto"
              control=""
              onSubmit={[Function]}
            >
              <div
                className="row"
              >
                <input
                  className="form__input"
                  id="username"
                  name="username"
                  onChange={[Function]}
                  placeholder="Enter Your Email"
                  required={true}
                  type="email"
                />
              </div>
              <div
                className="row"
              >
                <input
                  className="form__input"
                  id="password"
                  name="password"
                  onChange={[Function]}
                  placeholder="Enter Your Password"
                  required={true}
                  type="password"
                />
              </div>
              <div
                className="row"
              >
                <Button
                  active={false}
                  className="admin"
                  disable={false}
                  disabled={false}
                  type="submit"
                  variant="info"
                >
                   Log In 
                </Button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`should test RepForm component 1`] = `
<Formik
  initialValues={
    Object {
      "email": "",
      "password": "",
    }
  }
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": ReferenceSet {
        "list": Set {},
        "refs": Map {},
      },
      "_excludedEdges": Array [],
      "_mutate": undefined,
      "_nodes": Array [
        "password",
        "email",
      ],
      "_sortErrors": [Function],
      "_typeError": [Function],
      "_whitelist": ReferenceSet {
        "list": Set {},
        "refs": Map {},
      },
      "conditions": Array [],
      "deps": Array [],
      "exclusiveTests": Object {},
      "fields": Object {
        "email": StringSchema {
          "_blacklist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_blacklistError": undefined,
          "_mutate": undefined,
          "_typeError": [Function],
          "_whitelist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_whitelistError": undefined,
          "conditions": Array [],
          "deps": Array [],
          "exclusiveTests": Object {
            "email": false,
            "required": true,
          },
          "spec": Object {
            "abortEarly": true,
            "nullable": false,
            "presence": "required",
            "recursive": true,
            "strict": false,
            "strip": false,
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "password": StringSchema {
          "_blacklist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_blacklistError": undefined,
          "_mutate": undefined,
          "_typeError": [Function],
          "_whitelist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_whitelistError": undefined,
          "conditions": Array [],
          "deps": Array [],
          "exclusiveTests": Object {
            "required": true,
          },
          "spec": Object {
            "abortEarly": true,
            "nullable": false,
            "presence": "required",
            "recursive": true,
            "strict": false,
            "strip": false,
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
      },
      "spec": Object {
        "abortEarly": true,
        "nullable": false,
        "presence": "optional",
        "recursive": true,
        "strict": false,
        "strip": false,
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    }
  }
>
  <Component />
</Formik>
`;

exports[`should test UserForm component 1`] = `
<Formik
  initialValues={
    Object {
      "email": "",
      "password": "",
    }
  }
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": ReferenceSet {
        "list": Set {},
        "refs": Map {},
      },
      "_excludedEdges": Array [],
      "_mutate": undefined,
      "_nodes": Array [
        "password",
        "email",
      ],
      "_sortErrors": [Function],
      "_typeError": [Function],
      "_whitelist": ReferenceSet {
        "list": Set {},
        "refs": Map {},
      },
      "conditions": Array [],
      "deps": Array [],
      "exclusiveTests": Object {},
      "fields": Object {
        "email": StringSchema {
          "_blacklist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_blacklistError": undefined,
          "_mutate": undefined,
          "_typeError": [Function],
          "_whitelist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_whitelistError": undefined,
          "conditions": Array [],
          "deps": Array [],
          "exclusiveTests": Object {
            "email": false,
            "required": true,
          },
          "spec": Object {
            "abortEarly": true,
            "nullable": false,
            "presence": "required",
            "recursive": true,
            "strict": false,
            "strip": false,
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "password": StringSchema {
          "_blacklist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_blacklistError": undefined,
          "_mutate": undefined,
          "_typeError": [Function],
          "_whitelist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_whitelistError": undefined,
          "conditions": Array [],
          "deps": Array [],
          "exclusiveTests": Object {
            "required": true,
          },
          "spec": Object {
            "abortEarly": true,
            "nullable": false,
            "presence": "required",
            "recursive": true,
            "strict": false,
            "strip": false,
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
      },
      "spec": Object {
        "abortEarly": true,
        "nullable": false,
        "presence": "optional",
        "recursive": true,
        "strict": false,
        "strip": false,
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    }
  }
>
  <Component />
</Formik>
`;
